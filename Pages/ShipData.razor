@page "/shipdata"
@using IoTSpaceShip_App.Model
@using Microsoft.Extensions.Logging
@inject ILogger<ShipData> logger
@inject IJSRuntime JSRuntime
@inject HttpClient Http
<br />
<main class="container" role="main">
  <div class="d-flex align-items-center justify-content-center my-3 text-white bg-dark rounded shadow-sm">
    <h1>Live Ship Status</h1>
  </div>
  <div class="my-3 p-3 bg-white rounded shadow-lg">

    @if (status == null || spaceship == null)
    {
      <p><em>Loading...</em></p>
    }
    else
    {
      <div class="d-flex flex-sm-row flex-wrap justify-content-center mb-2">
        <div class="p-5 bd-highlight align-self-center">
          <img src="/img/1-spaceship.jpg" width="400">
        </div>
        <div class="p-5 bd-highlight">
          <table class="table">
            <thead>
              <tr>
                <th></th>
                <th>Ship Info</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>Ship Id</td>
                <td>@spaceship.Identifier</td>
              </tr>
              <tr>
                <td>Origin Planet</td>
                <td>@spaceship.OriginPlanet</td>
              </tr>
              <tr>
                <td>Description</td>
                <td>@spaceship.Description</td>
              </tr>
              <tr>
                <td>Builder</td>
                <td>@spaceship.Builder</td>
              </tr>


            </tbody>
          </table>
        </div>
      </div>
      <div class="row">
        <div class="col col-6">
          <h3 class="bg-secondary text-white text-center rounded">Location + Speed</h3>
          <table class="table">
            <thead>
              <tr>
                <th>Live Location</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>Location: </td>
                <td>@spaceship.Gps_N.ToString("0.0000") N @spaceship.Gps_W.ToString("0.0000") W</td>
              </tr>
              <tr>
                <td>Velocity:</td>
                <td>@spaceship.Velocity.ToString("0.0") MPH</td>
              </tr>
            </tbody>
          </table>
        </div>
        <div class="col col-6">
          <h3 class="bg-secondary text-white text-center rounded">Ship Status</h3>
          <table class="table">
            <thead>
              <tr>
                <th>Live Status</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>Propulsion System: </td>
                <td>@(status?.PropulsionSystem?.Value)</td>
              </tr>
              <tr>
                <td>Thrust:</td>
                <td>@(status.Thrust.Value) %</td>
              </tr>
              <tr>
                <td>Payload Door: </td>
                <td>@(status.DoorState.Value)</td>
              </tr>
              <tr>
                <td>Pitch</td>
                <td>@(status?.Pitch?.Value)  &#176;</td>
              </tr>
              <tr>
                <td>Engine RPM</td>
                <td>@(status?.Engine_RPM.Value)</td>
              </tr>
              <tr>
                <td>Engine Load</td>
                <td>@(status?.Engine_Load?.Value)</td>
              </tr>
              <tr>
                <td>Engine Temperature</td>
                <td>@(status?.Engine_Temperature?.Value)  &#176;C</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
      <br />
      

    }
  </div>





</main>
@code {
  private System.Threading.Timer timer;
  private Spaceship spaceship;
  private ShipStatus status;
  private const string serviceEndpoint = "https://cs361iotspacecraft.azurewebsites.net/api/shipstatus/current/";
  private double Gps_n = 0;
  private double Gps_w = 0;
  private double Velocity = 11235.02;

  protected override async Task OnInitializedAsync()
  {
    var identifier = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "spaceship.Identifier");
    var description = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "spaceship.Description");
    var builder = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "spaceship.Builder");
    var originPlanet = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "spaceship.OriginPlanet");
    var classification = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "spaceship.Classification");
    var zip = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "spaceship.ZipCode");
    var lat = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "spaceship.Lat");
    var lng = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "spaceship.Lng");

    spaceship = new Spaceship
    {
      Identifier = identifier,
      Description = description,
      Builder = builder,
      OriginPlanet = originPlanet,
      Classification = classification,
      ZipCode = zip,
      ProductionDate = new DateTime(2021, 10, 28),
      Gps_N = Convert.ToDouble(lat),
      Gps_W = Convert.ToDouble(lng),
      Velocity = Velocity
    };
    status = await Http.GetFromJsonAsync<ShipStatus>(serviceEndpoint);
    timer = new System.Threading.Timer((_) =>
    {
      InvokeAsync(async () =>
      {
        status = await Http.GetFromJsonAsync<ShipStatus>(serviceEndpoint);
        UpdateDataCallback();
        StateHasChanged();
      });
    }, null, TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(5));
  }

  private void UpdateDataCallback()
  {

    var rand = new Random();
    spaceship.Velocity += rand.Next(-10, 10);
    spaceship.Gps_N += (rand.Next(-2, 2) * rand.NextDouble());
    spaceship.Gps_W += (rand.Next(-2, 2) * rand.NextDouble());

  }
}
