@page "/shipdata"
@using IoTSpaceShip_App.Model
@using Microsoft.Extensions.Logging
@inject ILogger<ShipData> logger
@inject IJSRuntime JSRuntime
<br />
<main class="container" role="main">
  <div class="d-flex align-items-center justify-content-center my-3 text-white bg-dark rounded shadow-sm">
    <h1>Live Ship Status</h1>
  </div>
  <div class="my-3 p-3 bg-white rounded shadow-lg">

    @if (spaceship == null)
    {
      <p><em>Loading...</em></p>
    }
    else
    {
      <div class="d-flex flex-sm-row flex-wrap justify-content-center mb-2">
        <div class="p-5 bd-highlight align-self-center">
          <img src="/img/1-spaceship.jpg" width="400">
        </div>
        <div class="p-5 bd-highlight">
          <table class="table">
            <thead>
              <tr>
                <th></th>
                <th>Ship Info</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>Ship Id</td>
                <td>@spaceship.Identifier</td>
              </tr>
              <tr>
                <td>Origin Planet</td>
                <td>@spaceship.OriginPlanet</td>
              </tr>
              <tr>
                <td>Description</td>
                <td>@spaceship.Description</td>
              </tr>
              <tr>
                <td>Builder</td>
                <td>@spaceship.Builder</td>
              </tr>


            </tbody>
          </table>
        </div>
      </div>
      <div class="d-flex flex-sm-row flex-wrap justify-content-center mb-2">
        <div class="p-2 bd-highlight align-self-center">
          <h3 class="bg-dark text-white rounded">Location + Speed</h3>
          <table class="table">
            <thead>
              <tr>
                <th>Variable</th>
                <th>Data</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>Location: </td>
                <td>@spaceship.Gps_N.ToString("0.0000") N @spaceship.Gps_W.ToString("0.0000") W</td>
              </tr>
              <tr>
                <td>Velocity:</td>
                <td>@spaceship.Velocity.ToString("0.0") MPH</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>

    }
  </div>





</main>
@code {
  private System.Threading.Timer timer;
  private Spaceship spaceship;
  private double Gps_n = 39.7042;
  private double Gps_w = 86.3994;
  private double Velocity = 11235.02;

  protected override async Task OnInitializedAsync()
  {
    var identifier = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "spaceship.Identifier");
    var description = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "spaceship.Description");
    var builder = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "spaceship.Builder");
    var originPlanet = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "spaceship.OriginPlanet");
    var classification = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "spaceship.Classification");
    //var maximumOccupancy = await JSRuntime.InvokeAsync<int>("localStorage.getItem", "spaceship.MaxOccupancy");
    //var productionDate = await JSRuntime.InvokeAsync<DateTime>("localStorage.getItem", "spaceship.ProductionData");
    spaceship = new Spaceship
    {
      Identifier = identifier,
      Description = description,
      Builder = builder,
      OriginPlanet = originPlanet,
      Classification = classification,
      ZipCode = "46168",
      ProductionDate = new DateTime(2021, 10, 28),
      Gps_N = Gps_n,
      Gps_W = Gps_w,
      Velocity = Velocity
    };
    //StateHasChanged();

    timer = new System.Threading.Timer(UpdateDataCallback, null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
  }

  private void UpdateDataCallback(object state)
  {
    var rand = new Random();
    spaceship.Velocity += rand.Next(-10, 10);
    spaceship.Gps_N += (rand.Next(-2, 2) * rand.NextDouble());
    spaceship.Gps_W += (rand.Next(-2, 2) * rand.NextDouble());
    StateHasChanged();
  }
}
